
Distance_Measurement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  000022f4  00002388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080017e  0080017e  000024a6  2**0
                  ALLOC
  3 .stab         00001cb0  00000000  00000000  000024a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e21  00000000  00000000  00004158  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00004f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  000050f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000052cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  000072db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000844b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000944c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  000095ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  000098ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a15b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <main>
      8a:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e7       	ldi	r26, 0x73	; 115
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e7       	ldi	r24, 0x73	; 115
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 04 11 	jmp	0x2208	; 0x2208 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e5 58       	subi	r30, 0x85	; 133
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <main>:
#include "ultrasonic.h"
#include "lcd.h"
#include <util/delay.h>

int main(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <main+0x6>
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	uint16 distance = 0;
     ce0:	1a 82       	std	Y+2, r1	; 0x02
     ce2:	19 82       	std	Y+1, r1	; 0x01

	/* Initializing the LCD */
	LCD_init();
     ce4:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <LCD_init>

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     ce8:	af e5       	ldi	r26, 0x5F	; 95
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	ef e5       	ldi	r30, 0x5F	; 95
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	80 68       	ori	r24, 0x80	; 128
     cf4:	8c 93       	st	X, r24

	/* Initializing the Ultrasonic */
	Ultrasonic_init();
     cf6:	0e 94 08 10 	call	0x2010	; 0x2010 <Ultrasonic_init>

	/*
	 * Setup the LCD cursor to display where you want.
	 */
	LCD_moveCursor(0,0);
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_moveCursor>
	LCD_displayString("Distance= ");
     d02:	80 e6       	ldi	r24, 0x60	; 96
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayString>
	LCD_moveCursor(0,14);
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	6e e0       	ldi	r22, 0x0E	; 14
     d0e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_moveCursor>
	LCD_displayString("cm");
     d12:	8b e6       	ldi	r24, 0x6B	; 107
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayString>

	while(1)
	{
		/* Getting the distance */
		distance = Ultrasonic_readDistance();
     d1a:	0e 94 ab 10 	call	0x2156	; 0x2156 <Ultrasonic_readDistance>
     d1e:	9a 83       	std	Y+2, r25	; 0x02
     d20:	89 83       	std	Y+1, r24	; 0x01

		/* Display the distance value every time at same position */
		LCD_moveCursor(0,10);
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	6a e0       	ldi	r22, 0x0A	; 10
     d26:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_moveCursor>

		if(distance <= 100)
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	9a 81       	ldd	r25, Y+2	; 0x02
     d2e:	85 36       	cpi	r24, 0x65	; 101
     d30:	91 05       	cpc	r25, r1
     d32:	48 f4       	brcc	.+18     	; 0xd46 <main+0x70>
		{
			LCD_intgerToString(distance);
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_intgerToString>
			/* In case the digital value is two or one digits print space in the next digit place */
			LCD_displayString(" ");
     d3c:	8e e6       	ldi	r24, 0x6E	; 110
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayString>
     d44:	ea cf       	rjmp	.-44     	; 0xd1a <main+0x44>
		}
		else if( distance <= 10 )
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	9a 81       	ldd	r25, Y+2	; 0x02
     d4a:	8b 30       	cpi	r24, 0x0B	; 11
     d4c:	91 05       	cpc	r25, r1
     d4e:	48 f4       	brcc	.+18     	; 0xd62 <main+0x8c>
		{
			LCD_intgerToString(distance);
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	9a 81       	ldd	r25, Y+2	; 0x02
     d54:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_intgerToString>
			/* In case the digital value is two or one digits print space in the next digit place */
			LCD_displayString("  ");
     d58:	80 e7       	ldi	r24, 0x70	; 112
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayString>
     d60:	dc cf       	rjmp	.-72     	; 0xd1a <main+0x44>
		}
		else
		{
			LCD_intgerToString(distance);
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	9a 81       	ldd	r25, Y+2	; 0x02
     d66:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_intgerToString>
     d6a:	d7 cf       	rjmp	.-82     	; 0xd1a <main+0x44>

00000d6c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	00 d0       	rcall	.+0      	; 0xd72 <GPIO_setupPinDirection+0x6>
     d72:	00 d0       	rcall	.+0      	; 0xd74 <GPIO_setupPinDirection+0x8>
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	89 83       	std	Y+1, r24	; 0x01
     d7c:	6a 83       	std	Y+2, r22	; 0x02
     d7e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	88 30       	cpi	r24, 0x08	; 8
     d84:	08 f0       	brcs	.+2      	; 0xd88 <GPIO_setupPinDirection+0x1c>
     d86:	d5 c0       	rjmp	.+426    	; 0xf32 <GPIO_setupPinDirection+0x1c6>
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	08 f0       	brcs	.+2      	; 0xd90 <GPIO_setupPinDirection+0x24>
     d8e:	d1 c0       	rjmp	.+418    	; 0xf32 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	3d 83       	std	Y+5, r19	; 0x05
     d98:	2c 83       	std	Y+4, r18	; 0x04
     d9a:	8c 81       	ldd	r24, Y+4	; 0x04
     d9c:	9d 81       	ldd	r25, Y+5	; 0x05
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	91 05       	cpc	r25, r1
     da2:	09 f4       	brne	.+2      	; 0xda6 <GPIO_setupPinDirection+0x3a>
     da4:	43 c0       	rjmp	.+134    	; 0xe2c <GPIO_setupPinDirection+0xc0>
     da6:	2c 81       	ldd	r18, Y+4	; 0x04
     da8:	3d 81       	ldd	r19, Y+5	; 0x05
     daa:	22 30       	cpi	r18, 0x02	; 2
     dac:	31 05       	cpc	r19, r1
     dae:	2c f4       	brge	.+10     	; 0xdba <GPIO_setupPinDirection+0x4e>
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	71 f0       	breq	.+28     	; 0xdd4 <GPIO_setupPinDirection+0x68>
     db8:	bc c0       	rjmp	.+376    	; 0xf32 <GPIO_setupPinDirection+0x1c6>
     dba:	2c 81       	ldd	r18, Y+4	; 0x04
     dbc:	3d 81       	ldd	r19, Y+5	; 0x05
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <GPIO_setupPinDirection+0x5a>
     dc4:	5f c0       	rjmp	.+190    	; 0xe84 <GPIO_setupPinDirection+0x118>
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	9d 81       	ldd	r25, Y+5	; 0x05
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	91 05       	cpc	r25, r1
     dce:	09 f4       	brne	.+2      	; 0xdd2 <GPIO_setupPinDirection+0x66>
     dd0:	85 c0       	rjmp	.+266    	; 0xedc <GPIO_setupPinDirection+0x170>
     dd2:	af c0       	rjmp	.+350    	; 0xf32 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	a1 f4       	brne	.+40     	; 0xe02 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     dda:	aa e3       	ldi	r26, 0x3A	; 58
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	ea e3       	ldi	r30, 0x3A	; 58
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <GPIO_setupPinDirection+0x8c>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <GPIO_setupPinDirection+0x88>
     dfc:	84 2b       	or	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	98 c0       	rjmp	.+304    	; 0xf32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e02:	aa e3       	ldi	r26, 0x3A	; 58
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	ea e3       	ldi	r30, 0x3A	; 58
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <GPIO_setupPinDirection+0xb4>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <GPIO_setupPinDirection+0xb0>
     e24:	80 95       	com	r24
     e26:	84 23       	and	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	83 c0       	rjmp	.+262    	; 0xf32 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	a1 f4       	brne	.+40     	; 0xe5a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e32:	a7 e3       	ldi	r26, 0x37	; 55
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e7 e3       	ldi	r30, 0x37	; 55
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 2e       	mov	r0, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <GPIO_setupPinDirection+0xe4>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <GPIO_setupPinDirection+0xe0>
     e54:	84 2b       	or	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	6c c0       	rjmp	.+216    	; 0xf32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e5a:	a7 e3       	ldi	r26, 0x37	; 55
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e7 e3       	ldi	r30, 0x37	; 55
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <GPIO_setupPinDirection+0x10c>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <GPIO_setupPinDirection+0x108>
     e7c:	80 95       	com	r24
     e7e:	84 23       	and	r24, r20
     e80:	8c 93       	st	X, r24
     e82:	57 c0       	rjmp	.+174    	; 0xf32 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	a1 f4       	brne	.+40     	; 0xeb2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e8a:	a4 e3       	ldi	r26, 0x34	; 52
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e4 e3       	ldi	r30, 0x34	; 52
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 2e       	mov	r0, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <GPIO_setupPinDirection+0x13c>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <GPIO_setupPinDirection+0x138>
     eac:	84 2b       	or	r24, r20
     eae:	8c 93       	st	X, r24
     eb0:	40 c0       	rjmp	.+128    	; 0xf32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     eb2:	a4 e3       	ldi	r26, 0x34	; 52
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e4 e3       	ldi	r30, 0x34	; 52
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	48 2f       	mov	r20, r24
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 2e       	mov	r0, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <GPIO_setupPinDirection+0x164>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	0a 94       	dec	r0
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <GPIO_setupPinDirection+0x160>
     ed4:	80 95       	com	r24
     ed6:	84 23       	and	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	2b c0       	rjmp	.+86     	; 0xf32 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	a1 f4       	brne	.+40     	; 0xf0a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     ee2:	a1 e3       	ldi	r26, 0x31	; 49
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e1 e3       	ldi	r30, 0x31	; 49
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <GPIO_setupPinDirection+0x194>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <GPIO_setupPinDirection+0x190>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	14 c0       	rjmp	.+40     	; 0xf32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f0a:	a1 e3       	ldi	r26, 0x31	; 49
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e1 e3       	ldi	r30, 0x31	; 49
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <GPIO_setupPinDirection+0x1bc>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <GPIO_setupPinDirection+0x1b8>
     f2c:	80 95       	com	r24
     f2e:	84 23       	and	r24, r20
     f30:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	00 d0       	rcall	.+0      	; 0xf48 <GPIO_writePin+0x6>
     f48:	00 d0       	rcall	.+0      	; 0xf4a <GPIO_writePin+0x8>
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	6a 83       	std	Y+2, r22	; 0x02
     f54:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	88 30       	cpi	r24, 0x08	; 8
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <GPIO_writePin+0x1c>
     f5c:	d5 c0       	rjmp	.+426    	; 0x1108 <GPIO_writePin+0x1c6>
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	84 30       	cpi	r24, 0x04	; 4
     f62:	08 f0       	brcs	.+2      	; 0xf66 <GPIO_writePin+0x24>
     f64:	d1 c0       	rjmp	.+418    	; 0x1108 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	3d 83       	std	Y+5, r19	; 0x05
     f6e:	2c 83       	std	Y+4, r18	; 0x04
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	9d 81       	ldd	r25, Y+5	; 0x05
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	91 05       	cpc	r25, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <GPIO_writePin+0x3a>
     f7a:	43 c0       	rjmp	.+134    	; 0x1002 <GPIO_writePin+0xc0>
     f7c:	2c 81       	ldd	r18, Y+4	; 0x04
     f7e:	3d 81       	ldd	r19, Y+5	; 0x05
     f80:	22 30       	cpi	r18, 0x02	; 2
     f82:	31 05       	cpc	r19, r1
     f84:	2c f4       	brge	.+10     	; 0xf90 <GPIO_writePin+0x4e>
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	9d 81       	ldd	r25, Y+5	; 0x05
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	71 f0       	breq	.+28     	; 0xfaa <GPIO_writePin+0x68>
     f8e:	bc c0       	rjmp	.+376    	; 0x1108 <GPIO_writePin+0x1c6>
     f90:	2c 81       	ldd	r18, Y+4	; 0x04
     f92:	3d 81       	ldd	r19, Y+5	; 0x05
     f94:	22 30       	cpi	r18, 0x02	; 2
     f96:	31 05       	cpc	r19, r1
     f98:	09 f4       	brne	.+2      	; 0xf9c <GPIO_writePin+0x5a>
     f9a:	5f c0       	rjmp	.+190    	; 0x105a <GPIO_writePin+0x118>
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	91 05       	cpc	r25, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <GPIO_writePin+0x66>
     fa6:	85 c0       	rjmp	.+266    	; 0x10b2 <GPIO_writePin+0x170>
     fa8:	af c0       	rjmp	.+350    	; 0x1108 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	a1 f4       	brne	.+40     	; 0xfd8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     fb0:	ab e3       	ldi	r26, 0x3B	; 59
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	eb e3       	ldi	r30, 0x3B	; 59
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GPIO_writePin+0x8c>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GPIO_writePin+0x88>
     fd2:	84 2b       	or	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	98 c0       	rjmp	.+304    	; 0x1108 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     fd8:	ab e3       	ldi	r26, 0x3B	; 59
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	eb e3       	ldi	r30, 0x3B	; 59
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <GPIO_writePin+0xb4>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <GPIO_writePin+0xb0>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	83 c0       	rjmp	.+262    	; 0x1108 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	a1 f4       	brne	.+40     	; 0x1030 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1008:	a8 e3       	ldi	r26, 0x38	; 56
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e8 e3       	ldi	r30, 0x38	; 56
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <GPIO_writePin+0xe4>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <GPIO_writePin+0xe0>
    102a:	84 2b       	or	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	6c c0       	rjmp	.+216    	; 0x1108 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1030:	a8 e3       	ldi	r26, 0x38	; 56
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e8 e3       	ldi	r30, 0x38	; 56
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_writePin+0x10c>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_writePin+0x108>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	57 c0       	rjmp	.+174    	; 0x1108 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	a1 f4       	brne	.+40     	; 0x1088 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1060:	a5 e3       	ldi	r26, 0x35	; 53
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e5 e3       	ldi	r30, 0x35	; 53
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <GPIO_writePin+0x13c>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <GPIO_writePin+0x138>
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	40 c0       	rjmp	.+128    	; 0x1108 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1088:	a5 e3       	ldi	r26, 0x35	; 53
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e5 e3       	ldi	r30, 0x35	; 53
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <GPIO_writePin+0x164>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <GPIO_writePin+0x160>
    10aa:	80 95       	com	r24
    10ac:	84 23       	and	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	2b c0       	rjmp	.+86     	; 0x1108 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	a1 f4       	brne	.+40     	; 0x10e0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    10b8:	a2 e3       	ldi	r26, 0x32	; 50
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e2 e3       	ldi	r30, 0x32	; 50
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <GPIO_writePin+0x194>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <GPIO_writePin+0x190>
    10da:	84 2b       	or	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	14 c0       	rjmp	.+40     	; 0x1108 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    10e0:	a2 e3       	ldi	r26, 0x32	; 50
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e2 e3       	ldi	r30, 0x32	; 50
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <GPIO_writePin+0x1bc>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <GPIO_writePin+0x1b8>
    1102:	80 95       	com	r24
    1104:	84 23       	and	r24, r20
    1106:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	00 d0       	rcall	.+0      	; 0x111e <GPIO_readPin+0x6>
    111e:	00 d0       	rcall	.+0      	; 0x1120 <GPIO_readPin+0x8>
    1120:	0f 92       	push	r0
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	8a 83       	std	Y+2, r24	; 0x02
    1128:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    112a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	88 30       	cpi	r24, 0x08	; 8
    1130:	08 f0       	brcs	.+2      	; 0x1134 <GPIO_readPin+0x1c>
    1132:	84 c0       	rjmp	.+264    	; 0x123c <GPIO_readPin+0x124>
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	84 30       	cpi	r24, 0x04	; 4
    1138:	08 f0       	brcs	.+2      	; 0x113c <GPIO_readPin+0x24>
    113a:	80 c0       	rjmp	.+256    	; 0x123c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	3d 83       	std	Y+5, r19	; 0x05
    1144:	2c 83       	std	Y+4, r18	; 0x04
    1146:	4c 81       	ldd	r20, Y+4	; 0x04
    1148:	5d 81       	ldd	r21, Y+5	; 0x05
    114a:	41 30       	cpi	r20, 0x01	; 1
    114c:	51 05       	cpc	r21, r1
    114e:	79 f1       	breq	.+94     	; 0x11ae <GPIO_readPin+0x96>
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	9d 81       	ldd	r25, Y+5	; 0x05
    1154:	82 30       	cpi	r24, 0x02	; 2
    1156:	91 05       	cpc	r25, r1
    1158:	34 f4       	brge	.+12     	; 0x1166 <GPIO_readPin+0x4e>
    115a:	2c 81       	ldd	r18, Y+4	; 0x04
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	21 15       	cp	r18, r1
    1160:	31 05       	cpc	r19, r1
    1162:	69 f0       	breq	.+26     	; 0x117e <GPIO_readPin+0x66>
    1164:	6b c0       	rjmp	.+214    	; 0x123c <GPIO_readPin+0x124>
    1166:	4c 81       	ldd	r20, Y+4	; 0x04
    1168:	5d 81       	ldd	r21, Y+5	; 0x05
    116a:	42 30       	cpi	r20, 0x02	; 2
    116c:	51 05       	cpc	r21, r1
    116e:	b9 f1       	breq	.+110    	; 0x11de <GPIO_readPin+0xc6>
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	91 05       	cpc	r25, r1
    1178:	09 f4       	brne	.+2      	; 0x117c <GPIO_readPin+0x64>
    117a:	49 c0       	rjmp	.+146    	; 0x120e <GPIO_readPin+0xf6>
    117c:	5f c0       	rjmp	.+190    	; 0x123c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    117e:	e9 e3       	ldi	r30, 0x39	; 57
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	a9 01       	movw	r20, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <GPIO_readPin+0x7e>
    1192:	55 95       	asr	r21
    1194:	47 95       	ror	r20
    1196:	8a 95       	dec	r24
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <GPIO_readPin+0x7a>
    119a:	ca 01       	movw	r24, r20
    119c:	81 70       	andi	r24, 0x01	; 1
    119e:	90 70       	andi	r25, 0x00	; 0
    11a0:	88 23       	and	r24, r24
    11a2:	19 f0       	breq	.+6      	; 0x11aa <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	49 c0       	rjmp	.+146    	; 0x123c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11aa:	19 82       	std	Y+1, r1	; 0x01
    11ac:	47 c0       	rjmp	.+142    	; 0x123c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    11ae:	e6 e3       	ldi	r30, 0x36	; 54
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	a9 01       	movw	r20, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <GPIO_readPin+0xae>
    11c2:	55 95       	asr	r21
    11c4:	47 95       	ror	r20
    11c6:	8a 95       	dec	r24
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <GPIO_readPin+0xaa>
    11ca:	ca 01       	movw	r24, r20
    11cc:	81 70       	andi	r24, 0x01	; 1
    11ce:	90 70       	andi	r25, 0x00	; 0
    11d0:	88 23       	and	r24, r24
    11d2:	19 f0       	breq	.+6      	; 0x11da <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	31 c0       	rjmp	.+98     	; 0x123c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11da:	19 82       	std	Y+1, r1	; 0x01
    11dc:	2f c0       	rjmp	.+94     	; 0x123c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    11de:	e3 e3       	ldi	r30, 0x33	; 51
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a9 01       	movw	r20, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <GPIO_readPin+0xde>
    11f2:	55 95       	asr	r21
    11f4:	47 95       	ror	r20
    11f6:	8a 95       	dec	r24
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <GPIO_readPin+0xda>
    11fa:	ca 01       	movw	r24, r20
    11fc:	81 70       	andi	r24, 0x01	; 1
    11fe:	90 70       	andi	r25, 0x00	; 0
    1200:	88 23       	and	r24, r24
    1202:	19 f0       	breq	.+6      	; 0x120a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	19 c0       	rjmp	.+50     	; 0x123c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    120a:	19 82       	std	Y+1, r1	; 0x01
    120c:	17 c0       	rjmp	.+46     	; 0x123c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    120e:	e0 e3       	ldi	r30, 0x30	; 48
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a9 01       	movw	r20, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <GPIO_readPin+0x10e>
    1222:	55 95       	asr	r21
    1224:	47 95       	ror	r20
    1226:	8a 95       	dec	r24
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <GPIO_readPin+0x10a>
    122a:	ca 01       	movw	r24, r20
    122c:	81 70       	andi	r24, 0x01	; 1
    122e:	90 70       	andi	r25, 0x00	; 0
    1230:	88 23       	and	r24, r24
    1232:	19 f0       	breq	.+6      	; 0x123a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	01 c0       	rjmp	.+2      	; 0x123c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    123a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    123c:	89 81       	ldd	r24, Y+1	; 0x01
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <GPIO_setupPortDirection+0x6>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <GPIO_setupPortDirection+0x8>
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	84 30       	cpi	r24, 0x04	; 4
    1262:	90 f5       	brcc	.+100    	; 0x12c8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	3c 83       	std	Y+4, r19	; 0x04
    126c:	2b 83       	std	Y+3, r18	; 0x03
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	91 05       	cpc	r25, r1
    1276:	d1 f0       	breq	.+52     	; 0x12ac <GPIO_setupPortDirection+0x5e>
    1278:	2b 81       	ldd	r18, Y+3	; 0x03
    127a:	3c 81       	ldd	r19, Y+4	; 0x04
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	2c f4       	brge	.+10     	; 0x128c <GPIO_setupPortDirection+0x3e>
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	61 f0       	breq	.+24     	; 0x12a2 <GPIO_setupPortDirection+0x54>
    128a:	1e c0       	rjmp	.+60     	; 0x12c8 <GPIO_setupPortDirection+0x7a>
    128c:	2b 81       	ldd	r18, Y+3	; 0x03
    128e:	3c 81       	ldd	r19, Y+4	; 0x04
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	31 05       	cpc	r19, r1
    1294:	81 f0       	breq	.+32     	; 0x12b6 <GPIO_setupPortDirection+0x68>
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	91 05       	cpc	r25, r1
    129e:	81 f0       	breq	.+32     	; 0x12c0 <GPIO_setupPortDirection+0x72>
    12a0:	13 c0       	rjmp	.+38     	; 0x12c8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    12a2:	ea e3       	ldi	r30, 0x3A	; 58
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	80 83       	st	Z, r24
    12aa:	0e c0       	rjmp	.+28     	; 0x12c8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    12ac:	e7 e3       	ldi	r30, 0x37	; 55
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	80 83       	st	Z, r24
    12b4:	09 c0       	rjmp	.+18     	; 0x12c8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    12b6:	e4 e3       	ldi	r30, 0x34	; 52
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	80 83       	st	Z, r24
    12be:	04 c0       	rjmp	.+8      	; 0x12c8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    12c0:	e1 e3       	ldi	r30, 0x31	; 49
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	80 83       	st	Z, r24
			break;
		}
	}
}
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	00 d0       	rcall	.+0      	; 0x12dc <GPIO_writePort+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <GPIO_writePort+0x8>
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	84 30       	cpi	r24, 0x04	; 4
    12ea:	90 f5       	brcc	.+100    	; 0x1350 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	3c 83       	std	Y+4, r19	; 0x04
    12f4:	2b 83       	std	Y+3, r18	; 0x03
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	91 05       	cpc	r25, r1
    12fe:	d1 f0       	breq	.+52     	; 0x1334 <GPIO_writePort+0x5e>
    1300:	2b 81       	ldd	r18, Y+3	; 0x03
    1302:	3c 81       	ldd	r19, Y+4	; 0x04
    1304:	22 30       	cpi	r18, 0x02	; 2
    1306:	31 05       	cpc	r19, r1
    1308:	2c f4       	brge	.+10     	; 0x1314 <GPIO_writePort+0x3e>
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	61 f0       	breq	.+24     	; 0x132a <GPIO_writePort+0x54>
    1312:	1e c0       	rjmp	.+60     	; 0x1350 <GPIO_writePort+0x7a>
    1314:	2b 81       	ldd	r18, Y+3	; 0x03
    1316:	3c 81       	ldd	r19, Y+4	; 0x04
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	81 f0       	breq	.+32     	; 0x133e <GPIO_writePort+0x68>
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	83 30       	cpi	r24, 0x03	; 3
    1324:	91 05       	cpc	r25, r1
    1326:	81 f0       	breq	.+32     	; 0x1348 <GPIO_writePort+0x72>
    1328:	13 c0       	rjmp	.+38     	; 0x1350 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    132a:	eb e3       	ldi	r30, 0x3B	; 59
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	80 83       	st	Z, r24
    1332:	0e c0       	rjmp	.+28     	; 0x1350 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1334:	e8 e3       	ldi	r30, 0x38	; 56
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	80 83       	st	Z, r24
    133c:	09 c0       	rjmp	.+18     	; 0x1350 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    133e:	e5 e3       	ldi	r30, 0x35	; 53
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	80 83       	st	Z, r24
    1346:	04 c0       	rjmp	.+8      	; 0x1350 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1348:	e2 e3       	ldi	r30, 0x32	; 50
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	00 d0       	rcall	.+0      	; 0x1364 <GPIO_readPort+0x6>
    1364:	00 d0       	rcall	.+0      	; 0x1366 <GPIO_readPort+0x8>
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    136c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	84 30       	cpi	r24, 0x04	; 4
    1372:	90 f5       	brcc	.+100    	; 0x13d8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	3c 83       	std	Y+4, r19	; 0x04
    137c:	2b 83       	std	Y+3, r18	; 0x03
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	9c 81       	ldd	r25, Y+4	; 0x04
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	91 05       	cpc	r25, r1
    1386:	d1 f0       	breq	.+52     	; 0x13bc <GPIO_readPort+0x5e>
    1388:	2b 81       	ldd	r18, Y+3	; 0x03
    138a:	3c 81       	ldd	r19, Y+4	; 0x04
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	2c f4       	brge	.+10     	; 0x139c <GPIO_readPort+0x3e>
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	61 f0       	breq	.+24     	; 0x13b2 <GPIO_readPort+0x54>
    139a:	1e c0       	rjmp	.+60     	; 0x13d8 <GPIO_readPort+0x7a>
    139c:	2b 81       	ldd	r18, Y+3	; 0x03
    139e:	3c 81       	ldd	r19, Y+4	; 0x04
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	81 f0       	breq	.+32     	; 0x13c6 <GPIO_readPort+0x68>
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	83 30       	cpi	r24, 0x03	; 3
    13ac:	91 05       	cpc	r25, r1
    13ae:	81 f0       	breq	.+32     	; 0x13d0 <GPIO_readPort+0x72>
    13b0:	13 c0       	rjmp	.+38     	; 0x13d8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    13b2:	e9 e3       	ldi	r30, 0x39	; 57
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	89 83       	std	Y+1, r24	; 0x01
    13ba:	0e c0       	rjmp	.+28     	; 0x13d8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    13bc:	e6 e3       	ldi	r30, 0x36	; 54
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	09 c0       	rjmp	.+18     	; 0x13d8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    13c6:	e3 e3       	ldi	r30, 0x33	; 51
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    13d0:	e0 e3       	ldi	r30, 0x30	; 48
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    13e8:	1f 92       	push	r1
    13ea:	0f 92       	push	r0
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	0f 92       	push	r0
    13f0:	11 24       	eor	r1, r1
    13f2:	2f 93       	push	r18
    13f4:	3f 93       	push	r19
    13f6:	4f 93       	push	r20
    13f8:	5f 93       	push	r21
    13fa:	6f 93       	push	r22
    13fc:	7f 93       	push	r23
    13fe:	8f 93       	push	r24
    1400:	9f 93       	push	r25
    1402:	af 93       	push	r26
    1404:	bf 93       	push	r27
    1406:	ef 93       	push	r30
    1408:	ff 93       	push	r31
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1412:	80 91 7e 01 	lds	r24, 0x017E
    1416:	90 91 7f 01 	lds	r25, 0x017F
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	29 f0       	breq	.+10     	; 0x1428 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    141e:	e0 91 7e 01 	lds	r30, 0x017E
    1422:	f0 91 7f 01 	lds	r31, 0x017F
    1426:	09 95       	icall
	}
}
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	ff 91       	pop	r31
    142e:	ef 91       	pop	r30
    1430:	bf 91       	pop	r27
    1432:	af 91       	pop	r26
    1434:	9f 91       	pop	r25
    1436:	8f 91       	pop	r24
    1438:	7f 91       	pop	r23
    143a:	6f 91       	pop	r22
    143c:	5f 91       	pop	r21
    143e:	4f 91       	pop	r20
    1440:	3f 91       	pop	r19
    1442:	2f 91       	pop	r18
    1444:	0f 90       	pop	r0
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	0f 90       	pop	r0
    144a:	1f 90       	pop	r1
    144c:	18 95       	reti

0000144e <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	00 d0       	rcall	.+0      	; 0x1454 <Icu_init+0x6>
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	9a 83       	std	Y+2, r25	; 0x02
    145a:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    145c:	a1 e3       	ldi	r26, 0x31	; 49
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e1 e3       	ldi	r30, 0x31	; 49
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	8f 7b       	andi	r24, 0xBF	; 191
    1468:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    146a:	ef e4       	ldi	r30, 0x4F	; 79
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	8c e0       	ldi	r24, 0x0C	; 12
    1470:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1472:	ae e4       	ldi	r26, 0x4E	; 78
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ee e4       	ldi	r30, 0x4E	; 78
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	98 2f       	mov	r25, r24
    147e:	98 7f       	andi	r25, 0xF8	; 248
    1480:	e9 81       	ldd	r30, Y+1	; 0x01
    1482:	fa 81       	ldd	r31, Y+2	; 0x02
    1484:	80 81       	ld	r24, Z
    1486:	89 2b       	or	r24, r25
    1488:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    148a:	ae e4       	ldi	r26, 0x4E	; 78
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	ee e4       	ldi	r30, 0x4E	; 78
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	28 2f       	mov	r18, r24
    1496:	2f 7b       	andi	r18, 0xBF	; 191
    1498:	e9 81       	ldd	r30, Y+1	; 0x01
    149a:	fa 81       	ldd	r31, Y+2	; 0x02
    149c:	81 81       	ldd	r24, Z+1	; 0x01
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	00 24       	eor	r0, r0
    14a4:	96 95       	lsr	r25
    14a6:	87 95       	ror	r24
    14a8:	07 94       	ror	r0
    14aa:	96 95       	lsr	r25
    14ac:	87 95       	ror	r24
    14ae:	07 94       	ror	r0
    14b0:	98 2f       	mov	r25, r24
    14b2:	80 2d       	mov	r24, r0
    14b4:	82 2b       	or	r24, r18
    14b6:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    14b8:	ec e4       	ldi	r30, 0x4C	; 76
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	11 82       	std	Z+1, r1	; 0x01
    14be:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    14c0:	e6 e4       	ldi	r30, 0x46	; 70
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	11 82       	std	Z+1, r1	; 0x01
    14c6:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    14c8:	a9 e5       	ldi	r26, 0x59	; 89
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e9 e5       	ldi	r30, 0x59	; 89
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	80 62       	ori	r24, 0x20	; 32
    14d4:	8c 93       	st	X, r24
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <Icu_setCallBack+0x6>
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	9a 83       	std	Y+2, r25	; 0x02
    14ec:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	90 93 7f 01 	sts	0x017F, r25
    14f6:	80 93 7e 01 	sts	0x017E, r24
}
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	0f 92       	push	r0
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1510:	ae e4       	ldi	r26, 0x4E	; 78
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	ee e4       	ldi	r30, 0x4E	; 78
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	28 2f       	mov	r18, r24
    151c:	2f 7b       	andi	r18, 0xBF	; 191
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	88 2f       	mov	r24, r24
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	00 24       	eor	r0, r0
    1526:	96 95       	lsr	r25
    1528:	87 95       	ror	r24
    152a:	07 94       	ror	r0
    152c:	96 95       	lsr	r25
    152e:	87 95       	ror	r24
    1530:	07 94       	ror	r0
    1532:	98 2f       	mov	r25, r24
    1534:	80 2d       	mov	r24, r0
    1536:	82 2b       	or	r24, r18
    1538:	8c 93       	st	X, r24
}
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Icu_getInputCaptureValue(void)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    154a:	e6 e4       	ldi	r30, 0x46	; 70
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	91 81       	ldd	r25, Z+1	; 0x01
}
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1560:	ec e4       	ldi	r30, 0x4C	; 76
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	11 82       	std	Z+1, r1	; 0x01
    1566:	10 82       	st	Z, r1
}
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <Icu_DeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_DeInit(void)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1576:	ef e4       	ldi	r30, 0x4F	; 79
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	10 82       	st	Z, r1
	TCCR1B = 0;
    157c:	ee e4       	ldi	r30, 0x4E	; 78
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	10 82       	st	Z, r1
	TCNT1 = 0;
    1582:	ec e4       	ldi	r30, 0x4C	; 76
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	11 82       	std	Z+1, r1	; 0x01
    1588:	10 82       	st	Z, r1
	ICR1 = 0;
    158a:	e6 e4       	ldi	r30, 0x46	; 70
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	11 82       	std	Z+1, r1	; 0x01
    1590:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1592:	a9 e5       	ldi	r26, 0x59	; 89
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e9 e5       	ldi	r30, 0x59	; 89
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8f 7d       	andi	r24, 0xDF	; 223
    159e:	8c 93       	st	X, r24
}
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	2e 97       	sbiw	r28, 0x0e	; 14
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	41 e0       	ldi	r20, 0x01	; 1
    15c0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	62 e0       	ldi	r22, 0x02	; 2
    15c8:	41 e0       	ldi	r20, 0x01	; 1
    15ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <GPIO_setupPinDirection>

	/* Configure the direction for RW pin as output pin */
	GPIO_setupPinDirection(PORTB_ID,PIN1_ID,PIN_OUTPUT);
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	41 e0       	ldi	r20, 0x01	; 1
    15d4:	0e 94 b6 06 	call	0xd6c	; 0xd6c <GPIO_setupPinDirection>
	GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	61 e0       	ldi	r22, 0x01	; 1
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_writePin>
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	a0 ea       	ldi	r26, 0xA0	; 160
    15e8:	b1 e4       	ldi	r27, 0x41	; 65
    15ea:	8b 87       	std	Y+11, r24	; 0x0b
    15ec:	9c 87       	std	Y+12, r25	; 0x0c
    15ee:	ad 87       	std	Y+13, r26	; 0x0d
    15f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	4a ef       	ldi	r20, 0xFA	; 250
    1600:	54 e4       	ldi	r21, 0x44	; 68
    1602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	8f 83       	std	Y+7, r24	; 0x07
    160c:	98 87       	std	Y+8, r25	; 0x08
    160e:	a9 87       	std	Y+9, r26	; 0x09
    1610:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1612:	6f 81       	ldd	r22, Y+7	; 0x07
    1614:	78 85       	ldd	r23, Y+8	; 0x08
    1616:	89 85       	ldd	r24, Y+9	; 0x09
    1618:	9a 85       	ldd	r25, Y+10	; 0x0a
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e8       	ldi	r20, 0x80	; 128
    1620:	5f e3       	ldi	r21, 0x3F	; 63
    1622:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1626:	88 23       	and	r24, r24
    1628:	2c f4       	brge	.+10     	; 0x1634 <LCD_init+0x8e>
		__ticks = 1;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	9e 83       	std	Y+6, r25	; 0x06
    1630:	8d 83       	std	Y+5, r24	; 0x05
    1632:	3f c0       	rjmp	.+126    	; 0x16b2 <LCD_init+0x10c>
	else if (__tmp > 65535)
    1634:	6f 81       	ldd	r22, Y+7	; 0x07
    1636:	78 85       	ldd	r23, Y+8	; 0x08
    1638:	89 85       	ldd	r24, Y+9	; 0x09
    163a:	9a 85       	ldd	r25, Y+10	; 0x0a
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	3f ef       	ldi	r19, 0xFF	; 255
    1640:	4f e7       	ldi	r20, 0x7F	; 127
    1642:	57 e4       	ldi	r21, 0x47	; 71
    1644:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1648:	18 16       	cp	r1, r24
    164a:	4c f5       	brge	.+82     	; 0x169e <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164c:	6b 85       	ldd	r22, Y+11	; 0x0b
    164e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1650:	8d 85       	ldd	r24, Y+13	; 0x0d
    1652:	9e 85       	ldd	r25, Y+14	; 0x0e
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e2       	ldi	r20, 0x20	; 32
    165a:	51 e4       	ldi	r21, 0x41	; 65
    165c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	bc 01       	movw	r22, r24
    1666:	cd 01       	movw	r24, r26
    1668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	8d 83       	std	Y+5, r24	; 0x05
    1674:	0f c0       	rjmp	.+30     	; 0x1694 <LCD_init+0xee>
    1676:	88 ec       	ldi	r24, 0xC8	; 200
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	9c 83       	std	Y+4, r25	; 0x04
    167c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <LCD_init+0xdc>
    1686:	9c 83       	std	Y+4, r25	; 0x04
    1688:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168a:	8d 81       	ldd	r24, Y+5	; 0x05
    168c:	9e 81       	ldd	r25, Y+6	; 0x06
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	9e 83       	std	Y+6, r25	; 0x06
    1692:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1694:	8d 81       	ldd	r24, Y+5	; 0x05
    1696:	9e 81       	ldd	r25, Y+6	; 0x06
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	69 f7       	brne	.-38     	; 0x1676 <LCD_init+0xd0>
    169c:	14 c0       	rjmp	.+40     	; 0x16c6 <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169e:	6f 81       	ldd	r22, Y+7	; 0x07
    16a0:	78 85       	ldd	r23, Y+8	; 0x08
    16a2:	89 85       	ldd	r24, Y+9	; 0x09
    16a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8d 83       	std	Y+5, r24	; 0x05
    16b2:	8d 81       	ldd	r24, Y+5	; 0x05
    16b4:	9e 81       	ldd	r25, Y+6	; 0x06
    16b6:	9a 83       	std	Y+2, r25	; 0x02
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	9a 81       	ldd	r25, Y+2	; 0x02
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <LCD_init+0x118>
    16c2:	9a 83       	std	Y+2, r25	; 0x02
    16c4:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	6f ef       	ldi	r22, 0xFF	; 255
    16ca:	0e 94 27 09 	call	0x124e	; 0x124e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    16ce:	88 e3       	ldi	r24, 0x38	; 56
    16d0:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    16d4:	8c e0       	ldi	r24, 0x0C	; 12
    16d6:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <LCD_sendCommand>
}
    16e0:	2e 96       	adiw	r28, 0x0e	; 14
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	e9 97       	sbiw	r28, 0x39	; 57
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	40 e0       	ldi	r20, 0x00	; 0
    170e:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_writePin>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	a0 e8       	ldi	r26, 0x80	; 128
    1718:	bf e3       	ldi	r27, 0x3F	; 63
    171a:	8d ab       	std	Y+53, r24	; 0x35
    171c:	9e ab       	std	Y+54, r25	; 0x36
    171e:	af ab       	std	Y+55, r26	; 0x37
    1720:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1722:	6d a9       	ldd	r22, Y+53	; 0x35
    1724:	7e a9       	ldd	r23, Y+54	; 0x36
    1726:	8f a9       	ldd	r24, Y+55	; 0x37
    1728:	98 ad       	ldd	r25, Y+56	; 0x38
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	4a ef       	ldi	r20, 0xFA	; 250
    1730:	54 e4       	ldi	r21, 0x44	; 68
    1732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	89 ab       	std	Y+49, r24	; 0x31
    173c:	9a ab       	std	Y+50, r25	; 0x32
    173e:	ab ab       	std	Y+51, r26	; 0x33
    1740:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1742:	69 a9       	ldd	r22, Y+49	; 0x31
    1744:	7a a9       	ldd	r23, Y+50	; 0x32
    1746:	8b a9       	ldd	r24, Y+51	; 0x33
    1748:	9c a9       	ldd	r25, Y+52	; 0x34
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e8       	ldi	r20, 0x80	; 128
    1750:	5f e3       	ldi	r21, 0x3F	; 63
    1752:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1756:	88 23       	and	r24, r24
    1758:	2c f4       	brge	.+10     	; 0x1764 <LCD_sendCommand+0x72>
		__ticks = 1;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	98 ab       	std	Y+48, r25	; 0x30
    1760:	8f a7       	std	Y+47, r24	; 0x2f
    1762:	3f c0       	rjmp	.+126    	; 0x17e2 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1764:	69 a9       	ldd	r22, Y+49	; 0x31
    1766:	7a a9       	ldd	r23, Y+50	; 0x32
    1768:	8b a9       	ldd	r24, Y+51	; 0x33
    176a:	9c a9       	ldd	r25, Y+52	; 0x34
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	3f ef       	ldi	r19, 0xFF	; 255
    1770:	4f e7       	ldi	r20, 0x7F	; 127
    1772:	57 e4       	ldi	r21, 0x47	; 71
    1774:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1778:	18 16       	cp	r1, r24
    177a:	4c f5       	brge	.+82     	; 0x17ce <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177c:	6d a9       	ldd	r22, Y+53	; 0x35
    177e:	7e a9       	ldd	r23, Y+54	; 0x36
    1780:	8f a9       	ldd	r24, Y+55	; 0x37
    1782:	98 ad       	ldd	r25, Y+56	; 0x38
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e2       	ldi	r20, 0x20	; 32
    178a:	51 e4       	ldi	r21, 0x41	; 65
    178c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	98 ab       	std	Y+48, r25	; 0x30
    17a2:	8f a7       	std	Y+47, r24	; 0x2f
    17a4:	0f c0       	rjmp	.+30     	; 0x17c4 <LCD_sendCommand+0xd2>
    17a6:	88 ec       	ldi	r24, 0xC8	; 200
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	9e a7       	std	Y+46, r25	; 0x2e
    17ac:	8d a7       	std	Y+45, r24	; 0x2d
    17ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    17b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <LCD_sendCommand+0xc0>
    17b6:	9e a7       	std	Y+46, r25	; 0x2e
    17b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    17bc:	98 a9       	ldd	r25, Y+48	; 0x30
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	98 ab       	std	Y+48, r25	; 0x30
    17c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c6:	98 a9       	ldd	r25, Y+48	; 0x30
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	69 f7       	brne	.-38     	; 0x17a6 <LCD_sendCommand+0xb4>
    17cc:	14 c0       	rjmp	.+40     	; 0x17f6 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ce:	69 a9       	ldd	r22, Y+49	; 0x31
    17d0:	7a a9       	ldd	r23, Y+50	; 0x32
    17d2:	8b a9       	ldd	r24, Y+51	; 0x33
    17d4:	9c a9       	ldd	r25, Y+52	; 0x34
    17d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	98 ab       	std	Y+48, r25	; 0x30
    17e0:	8f a7       	std	Y+47, r24	; 0x2f
    17e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e4:	98 a9       	ldd	r25, Y+48	; 0x30
    17e6:	9c a7       	std	Y+44, r25	; 0x2c
    17e8:	8b a7       	std	Y+43, r24	; 0x2b
    17ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    17ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <LCD_sendCommand+0xfc>
    17f2:	9c a7       	std	Y+44, r25	; 0x2c
    17f4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	62 e0       	ldi	r22, 0x02	; 2
    17fa:	41 e0       	ldi	r20, 0x01	; 1
    17fc:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_writePin>
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	a0 e8       	ldi	r26, 0x80	; 128
    1806:	bf e3       	ldi	r27, 0x3F	; 63
    1808:	8f a3       	std	Y+39, r24	; 0x27
    180a:	98 a7       	std	Y+40, r25	; 0x28
    180c:	a9 a7       	std	Y+41, r26	; 0x29
    180e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1810:	6f a1       	ldd	r22, Y+39	; 0x27
    1812:	78 a5       	ldd	r23, Y+40	; 0x28
    1814:	89 a5       	ldd	r24, Y+41	; 0x29
    1816:	9a a5       	ldd	r25, Y+42	; 0x2a
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	4a ef       	ldi	r20, 0xFA	; 250
    181e:	54 e4       	ldi	r21, 0x44	; 68
    1820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	8b a3       	std	Y+35, r24	; 0x23
    182a:	9c a3       	std	Y+36, r25	; 0x24
    182c:	ad a3       	std	Y+37, r26	; 0x25
    182e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1830:	6b a1       	ldd	r22, Y+35	; 0x23
    1832:	7c a1       	ldd	r23, Y+36	; 0x24
    1834:	8d a1       	ldd	r24, Y+37	; 0x25
    1836:	9e a1       	ldd	r25, Y+38	; 0x26
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e8       	ldi	r20, 0x80	; 128
    183e:	5f e3       	ldi	r21, 0x3F	; 63
    1840:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1844:	88 23       	and	r24, r24
    1846:	2c f4       	brge	.+10     	; 0x1852 <LCD_sendCommand+0x160>
		__ticks = 1;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9a a3       	std	Y+34, r25	; 0x22
    184e:	89 a3       	std	Y+33, r24	; 0x21
    1850:	3f c0       	rjmp	.+126    	; 0x18d0 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1852:	6b a1       	ldd	r22, Y+35	; 0x23
    1854:	7c a1       	ldd	r23, Y+36	; 0x24
    1856:	8d a1       	ldd	r24, Y+37	; 0x25
    1858:	9e a1       	ldd	r25, Y+38	; 0x26
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	3f ef       	ldi	r19, 0xFF	; 255
    185e:	4f e7       	ldi	r20, 0x7F	; 127
    1860:	57 e4       	ldi	r21, 0x47	; 71
    1862:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1866:	18 16       	cp	r1, r24
    1868:	4c f5       	brge	.+82     	; 0x18bc <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186a:	6f a1       	ldd	r22, Y+39	; 0x27
    186c:	78 a5       	ldd	r23, Y+40	; 0x28
    186e:	89 a5       	ldd	r24, Y+41	; 0x29
    1870:	9a a5       	ldd	r25, Y+42	; 0x2a
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e2       	ldi	r20, 0x20	; 32
    1878:	51 e4       	ldi	r21, 0x41	; 65
    187a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	bc 01       	movw	r22, r24
    1884:	cd 01       	movw	r24, r26
    1886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	9a a3       	std	Y+34, r25	; 0x22
    1890:	89 a3       	std	Y+33, r24	; 0x21
    1892:	0f c0       	rjmp	.+30     	; 0x18b2 <LCD_sendCommand+0x1c0>
    1894:	88 ec       	ldi	r24, 0xC8	; 200
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	98 a3       	std	Y+32, r25	; 0x20
    189a:	8f 8f       	std	Y+31, r24	; 0x1f
    189c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    189e:	98 a1       	ldd	r25, Y+32	; 0x20
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <LCD_sendCommand+0x1ae>
    18a4:	98 a3       	std	Y+32, r25	; 0x20
    18a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a8:	89 a1       	ldd	r24, Y+33	; 0x21
    18aa:	9a a1       	ldd	r25, Y+34	; 0x22
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	9a a3       	std	Y+34, r25	; 0x22
    18b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b2:	89 a1       	ldd	r24, Y+33	; 0x21
    18b4:	9a a1       	ldd	r25, Y+34	; 0x22
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	69 f7       	brne	.-38     	; 0x1894 <LCD_sendCommand+0x1a2>
    18ba:	14 c0       	rjmp	.+40     	; 0x18e4 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18bc:	6b a1       	ldd	r22, Y+35	; 0x23
    18be:	7c a1       	ldd	r23, Y+36	; 0x24
    18c0:	8d a1       	ldd	r24, Y+37	; 0x25
    18c2:	9e a1       	ldd	r25, Y+38	; 0x26
    18c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	9a a3       	std	Y+34, r25	; 0x22
    18ce:	89 a3       	std	Y+33, r24	; 0x21
    18d0:	89 a1       	ldd	r24, Y+33	; 0x21
    18d2:	9a a1       	ldd	r25, Y+34	; 0x22
    18d4:	9e 8f       	std	Y+30, r25	; 0x1e
    18d6:	8d 8f       	std	Y+29, r24	; 0x1d
    18d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <LCD_sendCommand+0x1ea>
    18e0:	9e 8f       	std	Y+30, r25	; 0x1e
    18e2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	69 ad       	ldd	r22, Y+57	; 0x39
    18e8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePort>
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a0 e8       	ldi	r26, 0x80	; 128
    18f2:	bf e3       	ldi	r27, 0x3F	; 63
    18f4:	89 8f       	std	Y+25, r24	; 0x19
    18f6:	9a 8f       	std	Y+26, r25	; 0x1a
    18f8:	ab 8f       	std	Y+27, r26	; 0x1b
    18fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fc:	69 8d       	ldd	r22, Y+25	; 0x19
    18fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1900:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1902:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	4a ef       	ldi	r20, 0xFA	; 250
    190a:	54 e4       	ldi	r21, 0x44	; 68
    190c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	8d 8b       	std	Y+21, r24	; 0x15
    1916:	9e 8b       	std	Y+22, r25	; 0x16
    1918:	af 8b       	std	Y+23, r26	; 0x17
    191a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    191c:	6d 89       	ldd	r22, Y+21	; 0x15
    191e:	7e 89       	ldd	r23, Y+22	; 0x16
    1920:	8f 89       	ldd	r24, Y+23	; 0x17
    1922:	98 8d       	ldd	r25, Y+24	; 0x18
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e8       	ldi	r20, 0x80	; 128
    192a:	5f e3       	ldi	r21, 0x3F	; 63
    192c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1930:	88 23       	and	r24, r24
    1932:	2c f4       	brge	.+10     	; 0x193e <LCD_sendCommand+0x24c>
		__ticks = 1;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	9c 8b       	std	Y+20, r25	; 0x14
    193a:	8b 8b       	std	Y+19, r24	; 0x13
    193c:	3f c0       	rjmp	.+126    	; 0x19bc <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    193e:	6d 89       	ldd	r22, Y+21	; 0x15
    1940:	7e 89       	ldd	r23, Y+22	; 0x16
    1942:	8f 89       	ldd	r24, Y+23	; 0x17
    1944:	98 8d       	ldd	r25, Y+24	; 0x18
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	3f ef       	ldi	r19, 0xFF	; 255
    194a:	4f e7       	ldi	r20, 0x7F	; 127
    194c:	57 e4       	ldi	r21, 0x47	; 71
    194e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1952:	18 16       	cp	r1, r24
    1954:	4c f5       	brge	.+82     	; 0x19a8 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1956:	69 8d       	ldd	r22, Y+25	; 0x19
    1958:	7a 8d       	ldd	r23, Y+26	; 0x1a
    195a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    195c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e2       	ldi	r20, 0x20	; 32
    1964:	51 e4       	ldi	r21, 0x41	; 65
    1966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	bc 01       	movw	r22, r24
    1970:	cd 01       	movw	r24, r26
    1972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	9c 8b       	std	Y+20, r25	; 0x14
    197c:	8b 8b       	std	Y+19, r24	; 0x13
    197e:	0f c0       	rjmp	.+30     	; 0x199e <LCD_sendCommand+0x2ac>
    1980:	88 ec       	ldi	r24, 0xC8	; 200
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	9a 8b       	std	Y+18, r25	; 0x12
    1986:	89 8b       	std	Y+17, r24	; 0x11
    1988:	89 89       	ldd	r24, Y+17	; 0x11
    198a:	9a 89       	ldd	r25, Y+18	; 0x12
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <LCD_sendCommand+0x29a>
    1990:	9a 8b       	std	Y+18, r25	; 0x12
    1992:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1994:	8b 89       	ldd	r24, Y+19	; 0x13
    1996:	9c 89       	ldd	r25, Y+20	; 0x14
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	9c 8b       	std	Y+20, r25	; 0x14
    199c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199e:	8b 89       	ldd	r24, Y+19	; 0x13
    19a0:	9c 89       	ldd	r25, Y+20	; 0x14
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	69 f7       	brne	.-38     	; 0x1980 <LCD_sendCommand+0x28e>
    19a6:	14 c0       	rjmp	.+40     	; 0x19d0 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a8:	6d 89       	ldd	r22, Y+21	; 0x15
    19aa:	7e 89       	ldd	r23, Y+22	; 0x16
    19ac:	8f 89       	ldd	r24, Y+23	; 0x17
    19ae:	98 8d       	ldd	r25, Y+24	; 0x18
    19b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	9c 8b       	std	Y+20, r25	; 0x14
    19ba:	8b 8b       	std	Y+19, r24	; 0x13
    19bc:	8b 89       	ldd	r24, Y+19	; 0x13
    19be:	9c 89       	ldd	r25, Y+20	; 0x14
    19c0:	98 8b       	std	Y+16, r25	; 0x10
    19c2:	8f 87       	std	Y+15, r24	; 0x0f
    19c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c6:	98 89       	ldd	r25, Y+16	; 0x10
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <LCD_sendCommand+0x2d6>
    19cc:	98 8b       	std	Y+16, r25	; 0x10
    19ce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	62 e0       	ldi	r22, 0x02	; 2
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_writePin>
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	a0 e8       	ldi	r26, 0x80	; 128
    19e0:	bf e3       	ldi	r27, 0x3F	; 63
    19e2:	8b 87       	std	Y+11, r24	; 0x0b
    19e4:	9c 87       	std	Y+12, r25	; 0x0c
    19e6:	ad 87       	std	Y+13, r26	; 0x0d
    19e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	4a ef       	ldi	r20, 0xFA	; 250
    19f8:	54 e4       	ldi	r21, 0x44	; 68
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	8f 83       	std	Y+7, r24	; 0x07
    1a04:	98 87       	std	Y+8, r25	; 0x08
    1a06:	a9 87       	std	Y+9, r26	; 0x09
    1a08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0c:	78 85       	ldd	r23, Y+8	; 0x08
    1a0e:	89 85       	ldd	r24, Y+9	; 0x09
    1a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e8       	ldi	r20, 0x80	; 128
    1a18:	5f e3       	ldi	r21, 0x3F	; 63
    1a1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a1e:	88 23       	and	r24, r24
    1a20:	2c f4       	brge	.+10     	; 0x1a2c <LCD_sendCommand+0x33a>
		__ticks = 1;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	9e 83       	std	Y+6, r25	; 0x06
    1a28:	8d 83       	std	Y+5, r24	; 0x05
    1a2a:	3f c0       	rjmp	.+126    	; 0x1aaa <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2e:	78 85       	ldd	r23, Y+8	; 0x08
    1a30:	89 85       	ldd	r24, Y+9	; 0x09
    1a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	3f ef       	ldi	r19, 0xFF	; 255
    1a38:	4f e7       	ldi	r20, 0x7F	; 127
    1a3a:	57 e4       	ldi	r21, 0x47	; 71
    1a3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a40:	18 16       	cp	r1, r24
    1a42:	4c f5       	brge	.+82     	; 0x1a96 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e2       	ldi	r20, 0x20	; 32
    1a52:	51 e4       	ldi	r21, 0x41	; 65
    1a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	bc 01       	movw	r22, r24
    1a5e:	cd 01       	movw	r24, r26
    1a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9e 83       	std	Y+6, r25	; 0x06
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
    1a6c:	0f c0       	rjmp	.+30     	; 0x1a8c <LCD_sendCommand+0x39a>
    1a6e:	88 ec       	ldi	r24, 0xC8	; 200
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	8b 83       	std	Y+3, r24	; 0x03
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_sendCommand+0x388>
    1a7e:	9c 83       	std	Y+4, r25	; 0x04
    1a80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	9e 83       	std	Y+6, r25	; 0x06
    1a8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	69 f7       	brne	.-38     	; 0x1a6e <LCD_sendCommand+0x37c>
    1a94:	14 c0       	rjmp	.+40     	; 0x1abe <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a96:	6f 81       	ldd	r22, Y+7	; 0x07
    1a98:	78 85       	ldd	r23, Y+8	; 0x08
    1a9a:	89 85       	ldd	r24, Y+9	; 0x09
    1a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9e 83       	std	Y+6, r25	; 0x06
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
    1aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1aac:	9e 81       	ldd	r25, Y+6	; 0x06
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_sendCommand+0x3c4>
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1abe:	e9 96       	adiw	r28, 0x39	; 57
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	e9 97       	sbiw	r28, 0x39	; 57
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_writePin>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a0 e8       	ldi	r26, 0x80	; 128
    1af6:	bf e3       	ldi	r27, 0x3F	; 63
    1af8:	8d ab       	std	Y+53, r24	; 0x35
    1afa:	9e ab       	std	Y+54, r25	; 0x36
    1afc:	af ab       	std	Y+55, r26	; 0x37
    1afe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b00:	6d a9       	ldd	r22, Y+53	; 0x35
    1b02:	7e a9       	ldd	r23, Y+54	; 0x36
    1b04:	8f a9       	ldd	r24, Y+55	; 0x37
    1b06:	98 ad       	ldd	r25, Y+56	; 0x38
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	4a ef       	ldi	r20, 0xFA	; 250
    1b0e:	54 e4       	ldi	r21, 0x44	; 68
    1b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	89 ab       	std	Y+49, r24	; 0x31
    1b1a:	9a ab       	std	Y+50, r25	; 0x32
    1b1c:	ab ab       	std	Y+51, r26	; 0x33
    1b1e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b20:	69 a9       	ldd	r22, Y+49	; 0x31
    1b22:	7a a9       	ldd	r23, Y+50	; 0x32
    1b24:	8b a9       	ldd	r24, Y+51	; 0x33
    1b26:	9c a9       	ldd	r25, Y+52	; 0x34
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	5f e3       	ldi	r21, 0x3F	; 63
    1b30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b34:	88 23       	and	r24, r24
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	98 ab       	std	Y+48, r25	; 0x30
    1b3e:	8f a7       	std	Y+47, r24	; 0x2f
    1b40:	3f c0       	rjmp	.+126    	; 0x1bc0 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1b42:	69 a9       	ldd	r22, Y+49	; 0x31
    1b44:	7a a9       	ldd	r23, Y+50	; 0x32
    1b46:	8b a9       	ldd	r24, Y+51	; 0x33
    1b48:	9c a9       	ldd	r25, Y+52	; 0x34
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	3f ef       	ldi	r19, 0xFF	; 255
    1b4e:	4f e7       	ldi	r20, 0x7F	; 127
    1b50:	57 e4       	ldi	r21, 0x47	; 71
    1b52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	4c f5       	brge	.+82     	; 0x1bac <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5a:	6d a9       	ldd	r22, Y+53	; 0x35
    1b5c:	7e a9       	ldd	r23, Y+54	; 0x36
    1b5e:	8f a9       	ldd	r24, Y+55	; 0x37
    1b60:	98 ad       	ldd	r25, Y+56	; 0x38
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	98 ab       	std	Y+48, r25	; 0x30
    1b80:	8f a7       	std	Y+47, r24	; 0x2f
    1b82:	0f c0       	rjmp	.+30     	; 0x1ba2 <LCD_displayCharacter+0xd2>
    1b84:	88 ec       	ldi	r24, 0xC8	; 200
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	9e a7       	std	Y+46, r25	; 0x2e
    1b8a:	8d a7       	std	Y+45, r24	; 0x2d
    1b8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <LCD_displayCharacter+0xc0>
    1b94:	9e a7       	std	Y+46, r25	; 0x2e
    1b96:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	98 ab       	std	Y+48, r25	; 0x30
    1ba0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	69 f7       	brne	.-38     	; 0x1b84 <LCD_displayCharacter+0xb4>
    1baa:	14 c0       	rjmp	.+40     	; 0x1bd4 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bac:	69 a9       	ldd	r22, Y+49	; 0x31
    1bae:	7a a9       	ldd	r23, Y+50	; 0x32
    1bb0:	8b a9       	ldd	r24, Y+51	; 0x33
    1bb2:	9c a9       	ldd	r25, Y+52	; 0x34
    1bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	98 ab       	std	Y+48, r25	; 0x30
    1bbe:	8f a7       	std	Y+47, r24	; 0x2f
    1bc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc4:	9c a7       	std	Y+44, r25	; 0x2c
    1bc6:	8b a7       	std	Y+43, r24	; 0x2b
    1bc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bca:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <LCD_displayCharacter+0xfc>
    1bd0:	9c a7       	std	Y+44, r25	; 0x2c
    1bd2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	62 e0       	ldi	r22, 0x02	; 2
    1bd8:	41 e0       	ldi	r20, 0x01	; 1
    1bda:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_writePin>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a0 e8       	ldi	r26, 0x80	; 128
    1be4:	bf e3       	ldi	r27, 0x3F	; 63
    1be6:	8f a3       	std	Y+39, r24	; 0x27
    1be8:	98 a7       	std	Y+40, r25	; 0x28
    1bea:	a9 a7       	std	Y+41, r26	; 0x29
    1bec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bee:	6f a1       	ldd	r22, Y+39	; 0x27
    1bf0:	78 a5       	ldd	r23, Y+40	; 0x28
    1bf2:	89 a5       	ldd	r24, Y+41	; 0x29
    1bf4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a ef       	ldi	r20, 0xFA	; 250
    1bfc:	54 e4       	ldi	r21, 0x44	; 68
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	8b a3       	std	Y+35, r24	; 0x23
    1c08:	9c a3       	std	Y+36, r25	; 0x24
    1c0a:	ad a3       	std	Y+37, r26	; 0x25
    1c0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c10:	7c a1       	ldd	r23, Y+36	; 0x24
    1c12:	8d a1       	ldd	r24, Y+37	; 0x25
    1c14:	9e a1       	ldd	r25, Y+38	; 0x26
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e8       	ldi	r20, 0x80	; 128
    1c1c:	5f e3       	ldi	r21, 0x3F	; 63
    1c1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c22:	88 23       	and	r24, r24
    1c24:	2c f4       	brge	.+10     	; 0x1c30 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	9a a3       	std	Y+34, r25	; 0x22
    1c2c:	89 a3       	std	Y+33, r24	; 0x21
    1c2e:	3f c0       	rjmp	.+126    	; 0x1cae <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1c30:	6b a1       	ldd	r22, Y+35	; 0x23
    1c32:	7c a1       	ldd	r23, Y+36	; 0x24
    1c34:	8d a1       	ldd	r24, Y+37	; 0x25
    1c36:	9e a1       	ldd	r25, Y+38	; 0x26
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	3f ef       	ldi	r19, 0xFF	; 255
    1c3c:	4f e7       	ldi	r20, 0x7F	; 127
    1c3e:	57 e4       	ldi	r21, 0x47	; 71
    1c40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c44:	18 16       	cp	r1, r24
    1c46:	4c f5       	brge	.+82     	; 0x1c9a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c48:	6f a1       	ldd	r22, Y+39	; 0x27
    1c4a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c4c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e2       	ldi	r20, 0x20	; 32
    1c56:	51 e4       	ldi	r21, 0x41	; 65
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	bc 01       	movw	r22, r24
    1c62:	cd 01       	movw	r24, r26
    1c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9a a3       	std	Y+34, r25	; 0x22
    1c6e:	89 a3       	std	Y+33, r24	; 0x21
    1c70:	0f c0       	rjmp	.+30     	; 0x1c90 <LCD_displayCharacter+0x1c0>
    1c72:	88 ec       	ldi	r24, 0xC8	; 200
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	98 a3       	std	Y+32, r25	; 0x20
    1c78:	8f 8f       	std	Y+31, r24	; 0x1f
    1c7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c7c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <LCD_displayCharacter+0x1ae>
    1c82:	98 a3       	std	Y+32, r25	; 0x20
    1c84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c86:	89 a1       	ldd	r24, Y+33	; 0x21
    1c88:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	9a a3       	std	Y+34, r25	; 0x22
    1c8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c90:	89 a1       	ldd	r24, Y+33	; 0x21
    1c92:	9a a1       	ldd	r25, Y+34	; 0x22
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	69 f7       	brne	.-38     	; 0x1c72 <LCD_displayCharacter+0x1a2>
    1c98:	14 c0       	rjmp	.+40     	; 0x1cc2 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	9a a3       	std	Y+34, r25	; 0x22
    1cac:	89 a3       	std	Y+33, r24	; 0x21
    1cae:	89 a1       	ldd	r24, Y+33	; 0x21
    1cb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cb2:	9e 8f       	std	Y+30, r25	; 0x1e
    1cb4:	8d 8f       	std	Y+29, r24	; 0x1d
    1cb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cb8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <LCD_displayCharacter+0x1ea>
    1cbe:	9e 8f       	std	Y+30, r25	; 0x1e
    1cc0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	69 ad       	ldd	r22, Y+57	; 0x39
    1cc6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePort>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	a0 e8       	ldi	r26, 0x80	; 128
    1cd0:	bf e3       	ldi	r27, 0x3F	; 63
    1cd2:	89 8f       	std	Y+25, r24	; 0x19
    1cd4:	9a 8f       	std	Y+26, r25	; 0x1a
    1cd6:	ab 8f       	std	Y+27, r26	; 0x1b
    1cd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cda:	69 8d       	ldd	r22, Y+25	; 0x19
    1cdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	4a ef       	ldi	r20, 0xFA	; 250
    1ce8:	54 e4       	ldi	r21, 0x44	; 68
    1cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	8d 8b       	std	Y+21, r24	; 0x15
    1cf4:	9e 8b       	std	Y+22, r25	; 0x16
    1cf6:	af 8b       	std	Y+23, r26	; 0x17
    1cf8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1d00:	98 8d       	ldd	r25, Y+24	; 0x18
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e8       	ldi	r20, 0x80	; 128
    1d08:	5f e3       	ldi	r21, 0x3F	; 63
    1d0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0e:	88 23       	and	r24, r24
    1d10:	2c f4       	brge	.+10     	; 0x1d1c <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9c 8b       	std	Y+20, r25	; 0x14
    1d18:	8b 8b       	std	Y+19, r24	; 0x13
    1d1a:	3f c0       	rjmp	.+126    	; 0x1d9a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1d1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d20:	8f 89       	ldd	r24, Y+23	; 0x17
    1d22:	98 8d       	ldd	r25, Y+24	; 0x18
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	3f ef       	ldi	r19, 0xFF	; 255
    1d28:	4f e7       	ldi	r20, 0x7F	; 127
    1d2a:	57 e4       	ldi	r21, 0x47	; 71
    1d2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d30:	18 16       	cp	r1, r24
    1d32:	4c f5       	brge	.+82     	; 0x1d86 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d34:	69 8d       	ldd	r22, Y+25	; 0x19
    1d36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e2       	ldi	r20, 0x20	; 32
    1d42:	51 e4       	ldi	r21, 0x41	; 65
    1d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9c 8b       	std	Y+20, r25	; 0x14
    1d5a:	8b 8b       	std	Y+19, r24	; 0x13
    1d5c:	0f c0       	rjmp	.+30     	; 0x1d7c <LCD_displayCharacter+0x2ac>
    1d5e:	88 ec       	ldi	r24, 0xC8	; 200
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9a 8b       	std	Y+18, r25	; 0x12
    1d64:	89 8b       	std	Y+17, r24	; 0x11
    1d66:	89 89       	ldd	r24, Y+17	; 0x11
    1d68:	9a 89       	ldd	r25, Y+18	; 0x12
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_displayCharacter+0x29a>
    1d6e:	9a 8b       	std	Y+18, r25	; 0x12
    1d70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d72:	8b 89       	ldd	r24, Y+19	; 0x13
    1d74:	9c 89       	ldd	r25, Y+20	; 0x14
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	9c 8b       	std	Y+20, r25	; 0x14
    1d7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	69 f7       	brne	.-38     	; 0x1d5e <LCD_displayCharacter+0x28e>
    1d84:	14 c0       	rjmp	.+40     	; 0x1dae <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d86:	6d 89       	ldd	r22, Y+21	; 0x15
    1d88:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	9c 8b       	std	Y+20, r25	; 0x14
    1d98:	8b 8b       	std	Y+19, r24	; 0x13
    1d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9e:	98 8b       	std	Y+16, r25	; 0x10
    1da0:	8f 87       	std	Y+15, r24	; 0x0f
    1da2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1da4:	98 89       	ldd	r25, Y+16	; 0x10
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD_displayCharacter+0x2d6>
    1daa:	98 8b       	std	Y+16, r25	; 0x10
    1dac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	62 e0       	ldi	r22, 0x02	; 2
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_writePin>
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	a0 e8       	ldi	r26, 0x80	; 128
    1dbe:	bf e3       	ldi	r27, 0x3F	; 63
    1dc0:	8b 87       	std	Y+11, r24	; 0x0b
    1dc2:	9c 87       	std	Y+12, r25	; 0x0c
    1dc4:	ad 87       	std	Y+13, r26	; 0x0d
    1dc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	4a ef       	ldi	r20, 0xFA	; 250
    1dd6:	54 e4       	ldi	r21, 0x44	; 68
    1dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	8f 83       	std	Y+7, r24	; 0x07
    1de2:	98 87       	std	Y+8, r25	; 0x08
    1de4:	a9 87       	std	Y+9, r26	; 0x09
    1de6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dea:	78 85       	ldd	r23, Y+8	; 0x08
    1dec:	89 85       	ldd	r24, Y+9	; 0x09
    1dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e8       	ldi	r20, 0x80	; 128
    1df6:	5f e3       	ldi	r21, 0x3F	; 63
    1df8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dfc:	88 23       	and	r24, r24
    1dfe:	2c f4       	brge	.+10     	; 0x1e0a <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	9e 83       	std	Y+6, r25	; 0x06
    1e06:	8d 83       	std	Y+5, r24	; 0x05
    1e08:	3f c0       	rjmp	.+126    	; 0x1e88 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0c:	78 85       	ldd	r23, Y+8	; 0x08
    1e0e:	89 85       	ldd	r24, Y+9	; 0x09
    1e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	3f ef       	ldi	r19, 0xFF	; 255
    1e16:	4f e7       	ldi	r20, 0x7F	; 127
    1e18:	57 e4       	ldi	r21, 0x47	; 71
    1e1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e1e:	18 16       	cp	r1, r24
    1e20:	4c f5       	brge	.+82     	; 0x1e74 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e2       	ldi	r20, 0x20	; 32
    1e30:	51 e4       	ldi	r21, 0x41	; 65
    1e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	bc 01       	movw	r22, r24
    1e3c:	cd 01       	movw	r24, r26
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	9e 83       	std	Y+6, r25	; 0x06
    1e48:	8d 83       	std	Y+5, r24	; 0x05
    1e4a:	0f c0       	rjmp	.+30     	; 0x1e6a <LCD_displayCharacter+0x39a>
    1e4c:	88 ec       	ldi	r24, 0xC8	; 200
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	9c 83       	std	Y+4, r25	; 0x04
    1e52:	8b 83       	std	Y+3, r24	; 0x03
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	9c 81       	ldd	r25, Y+4	; 0x04
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <LCD_displayCharacter+0x388>
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	9e 81       	ldd	r25, Y+6	; 0x06
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	69 f7       	brne	.-38     	; 0x1e4c <LCD_displayCharacter+0x37c>
    1e72:	14 c0       	rjmp	.+40     	; 0x1e9c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e74:	6f 81       	ldd	r22, Y+7	; 0x07
    1e76:	78 85       	ldd	r23, Y+8	; 0x08
    1e78:	89 85       	ldd	r24, Y+9	; 0x09
    1e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <LCD_displayCharacter+0x3c4>
    1e98:	9a 83       	std	Y+2, r25	; 0x02
    1e9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e9c:	e9 96       	adiw	r28, 0x39	; 57
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <LCD_displayString+0x6>
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	9b 83       	std	Y+3, r25	; 0x03
    1ebc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ebe:	19 82       	std	Y+1, r1	; 0x01
    1ec0:	0e c0       	rjmp	.+28     	; 0x1ede <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ecc:	fc 01       	movw	r30, r24
    1ece:	e2 0f       	add	r30, r18
    1ed0:	f3 1f       	adc	r31, r19
    1ed2:	80 81       	ld	r24, Z
    1ed4:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_displayCharacter>
		i++;
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	8f 5f       	subi	r24, 0xFF	; 255
    1edc:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	fc 01       	movw	r30, r24
    1eea:	e2 0f       	add	r30, r18
    1eec:	f3 1f       	adc	r31, r19
    1eee:	80 81       	ld	r24, Z
    1ef0:	88 23       	and	r24, r24
    1ef2:	39 f7       	brne	.-50     	; 0x1ec2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <LCD_moveCursor+0x6>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <LCD_moveCursor+0x8>
    1f08:	0f 92       	push	r0
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	8a 83       	std	Y+2, r24	; 0x02
    1f10:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	3d 83       	std	Y+5, r19	; 0x05
    1f1a:	2c 83       	std	Y+4, r18	; 0x04
    1f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	91 05       	cpc	r25, r1
    1f24:	c1 f0       	breq	.+48     	; 0x1f56 <LCD_moveCursor+0x56>
    1f26:	2c 81       	ldd	r18, Y+4	; 0x04
    1f28:	3d 81       	ldd	r19, Y+5	; 0x05
    1f2a:	22 30       	cpi	r18, 0x02	; 2
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	2c f4       	brge	.+10     	; 0x1f3a <LCD_moveCursor+0x3a>
    1f30:	8c 81       	ldd	r24, Y+4	; 0x04
    1f32:	9d 81       	ldd	r25, Y+5	; 0x05
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	61 f0       	breq	.+24     	; 0x1f50 <LCD_moveCursor+0x50>
    1f38:	19 c0       	rjmp	.+50     	; 0x1f6c <LCD_moveCursor+0x6c>
    1f3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3e:	22 30       	cpi	r18, 0x02	; 2
    1f40:	31 05       	cpc	r19, r1
    1f42:	69 f0       	breq	.+26     	; 0x1f5e <LCD_moveCursor+0x5e>
    1f44:	8c 81       	ldd	r24, Y+4	; 0x04
    1f46:	9d 81       	ldd	r25, Y+5	; 0x05
    1f48:	83 30       	cpi	r24, 0x03	; 3
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	61 f0       	breq	.+24     	; 0x1f66 <LCD_moveCursor+0x66>
    1f4e:	0e c0       	rjmp	.+28     	; 0x1f6c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	0b c0       	rjmp	.+22     	; 0x1f6c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	80 5c       	subi	r24, 0xC0	; 192
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	07 c0       	rjmp	.+14     	; 0x1f6c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	80 5f       	subi	r24, 0xF0	; 240
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	03 c0       	rjmp	.+6      	; 0x1f6c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	80 5b       	subi	r24, 0xB0	; 176
    1f6a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	80 68       	ori	r24, 0x80	; 128
    1f70:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <LCD_sendCommand>
}
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <LCD_displayStringRowColumn+0x6>
    1f8a:	00 d0       	rcall	.+0      	; 0x1f8c <LCD_displayStringRowColumn+0x8>
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	6a 83       	std	Y+2, r22	; 0x02
    1f94:	5c 83       	std	Y+4, r21	; 0x04
    1f96:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	6a 81       	ldd	r22, Y+2	; 0x02
    1f9c:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa4:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayString>
}
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	62 97       	sbiw	r28, 0x12	; 18
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	9a 8b       	std	Y+18, r25	; 0x12
    1fcc:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1fce:	89 89       	ldd	r24, Y+17	; 0x11
    1fd0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fd2:	9e 01       	movw	r18, r28
    1fd4:	2f 5f       	subi	r18, 0xFF	; 255
    1fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd8:	b9 01       	movw	r22, r18
    1fda:	4a e0       	ldi	r20, 0x0A	; 10
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	0e 94 33 11 	call	0x2266	; 0x2266 <itoa>
   LCD_displayString(buff); /* Display the string */
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	01 96       	adiw	r24, 0x01	; 1
    1fe6:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayString>
}
    1fea:	62 96       	adiw	r28, 0x12	; 18
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <LCD_sendCommand>
}
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <Ultrasonic_init>:
 * -initializing the icu driver.
 * -setup the icu call back function.
 * -Setup the direction for the trigger pin as output pin.
 */
void Ultrasonic_init(void)
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
	/* initializing the icu with the required configurations */
	Icu_init(&icu_Config);
    2018:	8b e7       	ldi	r24, 0x7B	; 123
    201a:	91 e0       	ldi	r25, 0x01	; 1
    201c:	0e 94 27 0a 	call	0x144e	; 0x144e <Icu_init>

	 /* Setting the callback function. */
	Icu_setCallBack( Ultrasonic_edgeProcessing );
    2020:	87 ed       	ldi	r24, 0xD7	; 215
    2022:	90 e1       	ldi	r25, 0x10	; 16
    2024:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <Icu_setCallBack>

	 /*  Configure the direction for Trigger pin as output pin */
	GPIO_setupPinDirection(ULTRASONIC_TRIG_PORT, ULTRASONIC_TRIG_PIN, PIN_OUTPUT);
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	65 e0       	ldi	r22, 0x05	; 5
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <GPIO_setupPinDirection>
}
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <Ultrasonic_Trigger>:
/*
 * Description :
 * Function responsible for sending the trigger pulse to the ultrasonic
 */
void Ultrasonic_Trigger(void)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	2e 97       	sbiw	r28, 0x0e	; 14
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
	/* Sending the trigger pulse to the ultrasonic */
	GPIO_writePin(ULTRASONIC_TRIG_PORT, ULTRASONIC_TRIG_PIN, LOGIC_HIGH);
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	65 e0       	ldi	r22, 0x05	; 5
    2050:	41 e0       	ldi	r20, 0x01	; 1
    2052:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_writePin>
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	a0 e8       	ldi	r26, 0x80	; 128
    205c:	bf e3       	ldi	r27, 0x3F	; 63
    205e:	8b 87       	std	Y+11, r24	; 0x0b
    2060:	9c 87       	std	Y+12, r25	; 0x0c
    2062:	ad 87       	std	Y+13, r26	; 0x0d
    2064:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2066:	6b 85       	ldd	r22, Y+11	; 0x0b
    2068:	7c 85       	ldd	r23, Y+12	; 0x0c
    206a:	8d 85       	ldd	r24, Y+13	; 0x0d
    206c:	9e 85       	ldd	r25, Y+14	; 0x0e
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	4a ef       	ldi	r20, 0xFA	; 250
    2074:	54 e4       	ldi	r21, 0x44	; 68
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	8f 83       	std	Y+7, r24	; 0x07
    2080:	98 87       	std	Y+8, r25	; 0x08
    2082:	a9 87       	std	Y+9, r26	; 0x09
    2084:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2086:	6f 81       	ldd	r22, Y+7	; 0x07
    2088:	78 85       	ldd	r23, Y+8	; 0x08
    208a:	89 85       	ldd	r24, Y+9	; 0x09
    208c:	9a 85       	ldd	r25, Y+10	; 0x0a
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e8       	ldi	r20, 0x80	; 128
    2094:	5f e3       	ldi	r21, 0x3F	; 63
    2096:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    209a:	88 23       	and	r24, r24
    209c:	2c f4       	brge	.+10     	; 0x20a8 <Ultrasonic_Trigger+0x70>
		__ticks = 1;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	9e 83       	std	Y+6, r25	; 0x06
    20a4:	8d 83       	std	Y+5, r24	; 0x05
    20a6:	3f c0       	rjmp	.+126    	; 0x2126 <Ultrasonic_Trigger+0xee>
	else if (__tmp > 65535)
    20a8:	6f 81       	ldd	r22, Y+7	; 0x07
    20aa:	78 85       	ldd	r23, Y+8	; 0x08
    20ac:	89 85       	ldd	r24, Y+9	; 0x09
    20ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	3f ef       	ldi	r19, 0xFF	; 255
    20b4:	4f e7       	ldi	r20, 0x7F	; 127
    20b6:	57 e4       	ldi	r21, 0x47	; 71
    20b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20bc:	18 16       	cp	r1, r24
    20be:	4c f5       	brge	.+82     	; 0x2112 <Ultrasonic_Trigger+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e2       	ldi	r20, 0x20	; 32
    20ce:	51 e4       	ldi	r21, 0x41	; 65
    20d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
    20e8:	0f c0       	rjmp	.+30     	; 0x2108 <Ultrasonic_Trigger+0xd0>
    20ea:	88 ec       	ldi	r24, 0xC8	; 200
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9c 83       	std	Y+4, r25	; 0x04
    20f0:	8b 83       	std	Y+3, r24	; 0x03
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <Ultrasonic_Trigger+0xbe>
    20fa:	9c 83       	std	Y+4, r25	; 0x04
    20fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2100:	9e 81       	ldd	r25, Y+6	; 0x06
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	9e 83       	std	Y+6, r25	; 0x06
    2106:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2108:	8d 81       	ldd	r24, Y+5	; 0x05
    210a:	9e 81       	ldd	r25, Y+6	; 0x06
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	69 f7       	brne	.-38     	; 0x20ea <Ultrasonic_Trigger+0xb2>
    2110:	14 c0       	rjmp	.+40     	; 0x213a <Ultrasonic_Trigger+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2112:	6f 81       	ldd	r22, Y+7	; 0x07
    2114:	78 85       	ldd	r23, Y+8	; 0x08
    2116:	89 85       	ldd	r24, Y+9	; 0x09
    2118:	9a 85       	ldd	r25, Y+10	; 0x0a
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9e 83       	std	Y+6, r25	; 0x06
    2124:	8d 83       	std	Y+5, r24	; 0x05
    2126:	8d 81       	ldd	r24, Y+5	; 0x05
    2128:	9e 81       	ldd	r25, Y+6	; 0x06
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	9a 81       	ldd	r25, Y+2	; 0x02
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <Ultrasonic_Trigger+0xfa>
    2136:	9a 83       	std	Y+2, r25	; 0x02
    2138:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	GPIO_writePin(ULTRASONIC_TRIG_PORT, ULTRASONIC_TRIG_PIN, LOGIC_LOW);
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	65 e0       	ldi	r22, 0x05	; 5
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_writePin>
}
    2144:	2e 96       	adiw	r28, 0x0e	; 14
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <Ultrasonic_readDistance>:
/*
 * Description :
 * Function responsible for calling the Ultrasonic_Trigger function and starting the icu measurement.
 */
uint16 Ultrasonic_readDistance(void)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
	Ultrasonic_Trigger();
    215e:	0e 94 1c 10 	call	0x2038	; 0x2038 <Ultrasonic_Trigger>

	/*
	 * waiting the icu to give me the time value.
	 */
	while( g_edgeCount != 2 );
    2162:	80 91 80 01 	lds	r24, 0x0180
    2166:	82 30       	cpi	r24, 0x02	; 2
    2168:	e1 f7       	brne	.-8      	; 0x2162 <Ultrasonic_readDistance+0xc>

	/*
	 *clearing the counter of the edge to start from the beginning again.
	 */
	g_edgeCount = 0;
    216a:	10 92 80 01 	sts	0x0180, r1

	/*
	 *calculating the time and returning it.
	 */
	return ( (g_time)*0.017 ) ;
    216e:	80 91 81 01 	lds	r24, 0x0181
    2172:	90 91 82 01 	lds	r25, 0x0182
    2176:	cc 01       	movw	r24, r24
    2178:	a0 e0       	ldi	r26, 0x00	; 0
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	bc 01       	movw	r22, r24
    217e:	cd 01       	movw	r24, r26
    2180:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	26 e9       	ldi	r18, 0x96	; 150
    218e:	33 e4       	ldi	r19, 0x43	; 67
    2190:	4b e8       	ldi	r20, 0x8B	; 139
    2192:	5c e3       	ldi	r21, 0x3C	; 60
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
}
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <Ultrasonic_edgeProcessing>:
/*
 * Description :
 * Function responsible for calculating the high time generated by the ultrasonic sensor.
 */
void Ultrasonic_edgeProcessing(void)
{
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    21b6:	80 91 80 01 	lds	r24, 0x0180
    21ba:	8f 5f       	subi	r24, 0xFF	; 255
    21bc:	80 93 80 01 	sts	0x0180, r24

	if ( g_edgeCount == 1 )
    21c0:	80 91 80 01 	lds	r24, 0x0180
    21c4:	81 30       	cpi	r24, 0x01	; 1
    21c6:	31 f4       	brne	.+12     	; 0x21d4 <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		Icu_clearTimerValue();
    21c8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Icu_clearTimerValue>
		/* Detect falling edge */
		Icu_setEdgeDetectionType(FALLING);
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	0e 94 82 0a 	call	0x1504	; 0x1504 <Icu_setEdgeDetectionType>
    21d2:	0f c0       	rjmp	.+30     	; 0x21f2 <Ultrasonic_edgeProcessing+0x44>
	}
	else if ( g_edgeCount == 2 )
    21d4:	80 91 80 01 	lds	r24, 0x0180
    21d8:	82 30       	cpi	r24, 0x02	; 2
    21da:	59 f4       	brne	.+22     	; 0x21f2 <Ultrasonic_edgeProcessing+0x44>
	{
		/* Store the time value */
		g_time = Icu_getInputCaptureValue();
    21dc:	0e 94 a1 0a 	call	0x1542	; 0x1542 <Icu_getInputCaptureValue>
    21e0:	90 93 82 01 	sts	0x0182, r25
    21e4:	80 93 81 01 	sts	0x0181, r24
		/*
		 * Clear the timer counter register
		 */
		Icu_clearTimerValue();
    21e8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Icu_clearTimerValue>
		/* Detect rising edge */
		Icu_setEdgeDetectionType(RISING);
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	0e 94 82 0a 	call	0x1504	; 0x1504 <Icu_setEdgeDetectionType>
		}
}
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	08 95       	ret

000021f8 <__prologue_saves__>:
    21f8:	2f 92       	push	r2
    21fa:	3f 92       	push	r3
    21fc:	4f 92       	push	r4
    21fe:	5f 92       	push	r5
    2200:	6f 92       	push	r6
    2202:	7f 92       	push	r7
    2204:	8f 92       	push	r8
    2206:	9f 92       	push	r9
    2208:	af 92       	push	r10
    220a:	bf 92       	push	r11
    220c:	cf 92       	push	r12
    220e:	df 92       	push	r13
    2210:	ef 92       	push	r14
    2212:	ff 92       	push	r15
    2214:	0f 93       	push	r16
    2216:	1f 93       	push	r17
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	ca 1b       	sub	r28, r26
    2222:	db 0b       	sbc	r29, r27
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	09 94       	ijmp

00002230 <__epilogue_restores__>:
    2230:	2a 88       	ldd	r2, Y+18	; 0x12
    2232:	39 88       	ldd	r3, Y+17	; 0x11
    2234:	48 88       	ldd	r4, Y+16	; 0x10
    2236:	5f 84       	ldd	r5, Y+15	; 0x0f
    2238:	6e 84       	ldd	r6, Y+14	; 0x0e
    223a:	7d 84       	ldd	r7, Y+13	; 0x0d
    223c:	8c 84       	ldd	r8, Y+12	; 0x0c
    223e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2240:	aa 84       	ldd	r10, Y+10	; 0x0a
    2242:	b9 84       	ldd	r11, Y+9	; 0x09
    2244:	c8 84       	ldd	r12, Y+8	; 0x08
    2246:	df 80       	ldd	r13, Y+7	; 0x07
    2248:	ee 80       	ldd	r14, Y+6	; 0x06
    224a:	fd 80       	ldd	r15, Y+5	; 0x05
    224c:	0c 81       	ldd	r16, Y+4	; 0x04
    224e:	1b 81       	ldd	r17, Y+3	; 0x03
    2250:	aa 81       	ldd	r26, Y+2	; 0x02
    2252:	b9 81       	ldd	r27, Y+1	; 0x01
    2254:	ce 0f       	add	r28, r30
    2256:	d1 1d       	adc	r29, r1
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	ed 01       	movw	r28, r26
    2264:	08 95       	ret

00002266 <itoa>:
    2266:	fb 01       	movw	r30, r22
    2268:	9f 01       	movw	r18, r30
    226a:	e8 94       	clt
    226c:	42 30       	cpi	r20, 0x02	; 2
    226e:	c4 f0       	brlt	.+48     	; 0x22a0 <itoa+0x3a>
    2270:	45 32       	cpi	r20, 0x25	; 37
    2272:	b4 f4       	brge	.+44     	; 0x22a0 <itoa+0x3a>
    2274:	4a 30       	cpi	r20, 0x0A	; 10
    2276:	29 f4       	brne	.+10     	; 0x2282 <itoa+0x1c>
    2278:	97 fb       	bst	r25, 7
    227a:	1e f4       	brtc	.+6      	; 0x2282 <itoa+0x1c>
    227c:	90 95       	com	r25
    227e:	81 95       	neg	r24
    2280:	9f 4f       	sbci	r25, 0xFF	; 255
    2282:	64 2f       	mov	r22, r20
    2284:	77 27       	eor	r23, r23
    2286:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__udivmodhi4>
    228a:	80 5d       	subi	r24, 0xD0	; 208
    228c:	8a 33       	cpi	r24, 0x3A	; 58
    228e:	0c f0       	brlt	.+2      	; 0x2292 <itoa+0x2c>
    2290:	89 5d       	subi	r24, 0xD9	; 217
    2292:	81 93       	st	Z+, r24
    2294:	cb 01       	movw	r24, r22
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	a1 f7       	brne	.-24     	; 0x2282 <itoa+0x1c>
    229a:	16 f4       	brtc	.+4      	; 0x22a0 <itoa+0x3a>
    229c:	5d e2       	ldi	r21, 0x2D	; 45
    229e:	51 93       	st	Z+, r21
    22a0:	10 82       	st	Z, r1
    22a2:	c9 01       	movw	r24, r18
    22a4:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <strrev>

000022a8 <strrev>:
    22a8:	dc 01       	movw	r26, r24
    22aa:	fc 01       	movw	r30, r24
    22ac:	67 2f       	mov	r22, r23
    22ae:	71 91       	ld	r23, Z+
    22b0:	77 23       	and	r23, r23
    22b2:	e1 f7       	brne	.-8      	; 0x22ac <strrev+0x4>
    22b4:	32 97       	sbiw	r30, 0x02	; 2
    22b6:	04 c0       	rjmp	.+8      	; 0x22c0 <strrev+0x18>
    22b8:	7c 91       	ld	r23, X
    22ba:	6d 93       	st	X+, r22
    22bc:	70 83       	st	Z, r23
    22be:	62 91       	ld	r22, -Z
    22c0:	ae 17       	cp	r26, r30
    22c2:	bf 07       	cpc	r27, r31
    22c4:	c8 f3       	brcs	.-14     	; 0x22b8 <strrev+0x10>
    22c6:	08 95       	ret

000022c8 <__udivmodhi4>:
    22c8:	aa 1b       	sub	r26, r26
    22ca:	bb 1b       	sub	r27, r27
    22cc:	51 e1       	ldi	r21, 0x11	; 17
    22ce:	07 c0       	rjmp	.+14     	; 0x22de <__udivmodhi4_ep>

000022d0 <__udivmodhi4_loop>:
    22d0:	aa 1f       	adc	r26, r26
    22d2:	bb 1f       	adc	r27, r27
    22d4:	a6 17       	cp	r26, r22
    22d6:	b7 07       	cpc	r27, r23
    22d8:	10 f0       	brcs	.+4      	; 0x22de <__udivmodhi4_ep>
    22da:	a6 1b       	sub	r26, r22
    22dc:	b7 0b       	sbc	r27, r23

000022de <__udivmodhi4_ep>:
    22de:	88 1f       	adc	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	5a 95       	dec	r21
    22e4:	a9 f7       	brne	.-22     	; 0x22d0 <__udivmodhi4_loop>
    22e6:	80 95       	com	r24
    22e8:	90 95       	com	r25
    22ea:	bc 01       	movw	r22, r24
    22ec:	cd 01       	movw	r24, r26
    22ee:	08 95       	ret

000022f0 <_exit>:
    22f0:	f8 94       	cli

000022f2 <__stop_program>:
    22f2:	ff cf       	rjmp	.-2      	; 0x22f2 <__stop_program>
